1)what is hibernate and why to use it ?
is an Object-relational mapping (ORM) tool used to map java objects and database tables.

its provide JPA implementation hence we can use JPA annotations as well as xml configurations to achieve this mapping.

2)why hibernate ?
hibernate eliminates all the boiler-plate code that comes with JDBC.
it supports HQL (Hibernate Query Language) with is more Object oriented.
it provides transaction management implicitly.
hibernate throws JDBCException or HibernateException which are the unchecked exceptions, so we don't need to worry about handling using try catch.
hibernate supports caching for better performance.


3)important interface used in hibernate 
Session:
Main interface for interacting with the database.
Used to perform CRUD operations.

SessionFactory:
Provides Session objects.
Responsible for creating and managing database connections.

Transaction:
Manages database transactions.
Ensures consistency and rollback in case of failure.

Query:
Used to write HQL queries.
Executes select, update, and delete operations.

Criteria:
Provides an API to build dynamic and type-safe queries.
Replaced by CriteriaQuery in JPA.

Configuration:
Used to configure Hibernate.
Reads hibernate.cfg.xml or annotations to set up Hibernate.


4)annotations used in hibernate 
@Entity
Marks a class as a Hibernate entity (mapped to a database table).

@Table
Specifies the table name in the database.
Example: @Table(name = "employee").

@Id
Marks a field as the primary key of the table.

@GeneratedValue
Specifies the primary key generation strategy.
Example: @GeneratedValue(strategy = GenerationType.IDENTITY).

@Column
Maps a field to a specific column in the table.
Example: @Column(name = "emp_name", nullable = false).

@Transient
It means the field is present in the object (Java class) but does not have a corresponding column in the database table.

@OneToOne
Defines a one-to-one relationship between entities.

@OneToMany
Defines a one-to-many relationship.

@ManyToOne
Defines a many-to-one relationship.

@ManyToMany
Defines a many-to-many relationship.

@JoinColumn
Specifies the foreign key column for a relationship.
Example: @JoinColumn(name = "department_id").